//package com.example.quanlychitieu_finly
//
//import android.os.Bundle
//import android.view.LayoutInflater
//import android.view.View
//import android.view.ViewGroup
//import android.widget.ArrayAdapter
//import android.widget.AutoCompleteTextView
//import android.widget.EditText
//import android.widget.TextView
//import android.widget.Toast
//import androidx.fragment.app.Fragment
//import androidx.recyclerview.widget.LinearLayoutManager
//import androidx.recyclerview.widget.RecyclerView
//import com.google.android.material.card.MaterialCardView
//import com.google.android.material.dialog.MaterialAlertDialogBuilder
//import com.google.firebase.Timestamp
//import com.google.firebase.auth.FirebaseAuth
//import com.google.firebase.firestore.FirebaseFirestore
//import com.google.firebase.firestore.Query
//import java.text.NumberFormat
//import java.text.SimpleDateFormat
//import java.util.*
//
//class HomeFragment : Fragment() {
//
//    private lateinit var db: FirebaseFirestore
//    private lateinit var auth: FirebaseAuth
//
//    private lateinit var rvTransactions: RecyclerView
//    private lateinit var adapter: TransactionAdapter
//    private val transactionList = mutableListOf<Transaction>()
//
//    private var tvIncome: TextView? = null
//    private var tvExpense: TextView? = null
//    private var tvBalance: TextView? = null
//    private var tvCount: TextView? = null
//
//    override fun onCreateView(
//        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
//    ): View {
//        val view = inflater.inflate(R.layout.fragment_home, container, false)
//
//        db = FirebaseFirestore.getInstance()
//        auth = FirebaseAuth.getInstance()
//
//        // RecyclerView
//        rvTransactions = view.findViewById(R.id.rvTransactions)
//        adapter = TransactionAdapter(transactionList)
//        rvTransactions.layoutManager = LinearLayoutManager(requireContext())
//        rvTransactions.adapter = adapter
//
//        // Buttons (MaterialCardView)
//        val btnAddIncome: MaterialCardView = view.findViewById(R.id.add_income_layout)
//        val btnAddExpense: MaterialCardView = view.findViewById(R.id.add_expense_layout)
//        btnAddIncome.setOnClickListener { openAddTransactionFlow("income") }
//        btnAddExpense.setOnClickListener { openAddTransactionFlow("expense") }
//
//        // T·ªïng
//        tvIncome = view.findViewById(R.id.tvIncome)
//        tvExpense = view.findViewById(R.id.tvExpense)
//        tvBalance = view.findViewById(R.id.tvBalance)
//        tvCount   = view.findViewById(R.id.tvTransactionCount)
//
//        // Ng√†y
//        val tvDate = view.findViewById<TextView>(R.id.tvDate)
//        val df = SimpleDateFormat("EEEE, dd MMMM yyyy", Locale("vi", "VN"))
//        tvDate.text = df.format(Date())
//
//        // Load t·∫•t c·∫£ giao d·ªãch (users/{uid}/transactions)
//        subscribeTransactions()
//
//        return view
//    }
//
//    /** 1) L·∫•y categories -> 2) M·ªü dialog nh·∫≠p & ch·ªçn danh m·ª•c -> 3) L∆∞u transaction */
//    private fun openAddTransactionFlow(type: String) {
//        val userId = auth.currentUser?.uid ?: run {
//            Toast.makeText(requireContext(), "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p", Toast.LENGTH_SHORT).show()
//            return
//        }
//
//        val wantedType = if (type == "income") "income" else "spending"
//
//        db.collection("users").document(userId)
//            .collection("categories")
//            .whereEqualTo("type", wantedType)              // <-- ch·ªâ l·∫•y danh m·ª•c ƒë√∫ng lo·∫°i
//            .orderBy("name")                               // s·∫Øp x·∫øp theo t√™n (optional)
//            .get()
//            .addOnSuccessListener { snap ->
//                val categories = snap.documents.mapNotNull { doc ->
//                    doc.toObject(Category::class.java)?.apply { id = doc.id }  // <-- g·∫Øn id
//                }
//
//                if (categories.isEmpty()) {
//                    Toast.makeText(requireContext(), "Ch∆∞a c√≥ danh m·ª•c $wantedType. H√£y t·∫°o tr∆∞·ªõc.", Toast.LENGTH_SHORT).show()
//                    return@addOnSuccessListener
//                }
//
//                showAddTransactionDialog(type, categories)
//            }
//            .addOnFailureListener {
//                Toast.makeText(requireContext(), "L·ªói t·∫£i danh m·ª•c: ${it.message}", Toast.LENGTH_SHORT).show()
//            }
//    }
//
//
//    /** Hi·ªÉn th·ªã dialog nh·∫≠p title/amount + ch·ªçn category t·ª´ list */
//    private fun showAddTransactionDialog(type: String, categories: List<Category>) {
//        val dialogView = layoutInflater.inflate(R.layout.dialog_add_transaction, null)
//        val edtTitle   = dialogView.findViewById<EditText>(R.id.edtTitle)
//        val edtAmount  = dialogView.findViewById<EditText>(R.id.edtAmount)
//        val actv       = dialogView.findViewById<AutoCompleteTextView>(R.id.actvCategory)
//
//        val catAdapter = CategoryDropdownAdapter(requireContext(), categories)
//        actv.setAdapter(catAdapter)
//
//        // ch·ªçn s·∫µn m·ª•c ƒë·∫ßu
//        var chosen: Category? = categories.firstOrNull()
//        actv.setText(chosen?.name ?: "", false)
//
//        // üîß QUAN TR·ªåNG: khi ch·ªçn item, set l·∫°i text = name (kh√¥ng ph·∫£i toString())
//        actv.setOnItemClickListener { _, _, position, _ ->
//            chosen = categories[position]
//            actv.setText(chosen!!.name, false)
//        }
//
//        MaterialAlertDialogBuilder(requireContext())
//            .setTitle(if (type == "income") "Th√™m thu nh·∫≠p" else "Th√™m chi ti√™u")
//            .setView(dialogView)
//            .setPositiveButton("L∆∞u") { _, _ ->
//                val title = edtTitle.text.toString().trim()
//                val amount = edtAmount.text.toString().trim().toDoubleOrNull() ?: 0.0
//
//                // fallback n·∫øu ng∆∞·ªùi d√πng t·ª± s·ª≠a text
//                if (chosen == null) {
//                    val typed = actv.text?.toString()?.trim().orEmpty()
//                    chosen = categories.find { it.name == typed }
//                }
//
//                if (title.isEmpty() || chosen == null || amount <= 0) {
//                    Toast.makeText(requireContext(), "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin h·ª£p l·ªá", Toast.LENGTH_SHORT).show()
//                    return@setPositiveButton
//                }
//                saveTransaction(type, title, chosen!!, amount)
//            }
//            .setNegativeButton("H·ªßy", null)
//            .show()
//    }
//
//
//    /** L∆∞u xu·ªëng users/{uid}/transactions */
//    private fun saveTransaction(type: String, title: String, category: Category, amount: Double) {
//        val userId = auth.currentUser?.uid ?: return
//        val userDoc = db.collection("users").document(userId)
//
//        // T·∫°o id tr∆∞·ªõc ƒë·ªÉ g·∫Øn v√†o doc (d·ªÖ x√≥a/s·ª≠a sau n√†y)
//        val txCol = userDoc.collection("transactions")
//        val txId = txCol.document().id
//
//        val t = Transaction(
//            title = title,
//            categoryId = category.id,
//            categoryName = category.name,
//            categoryIconUrl = category.iconUrl,
//            categoryColorHex = "",              // c√≥ color th√¨ set v√†o ƒë√¢y
//            amount = amount,
//            type = type,
//            date = Timestamp.now()
//            // n·∫øu mu·ªën l∆∞u lu√¥n id: th√™m field v√†o model Transaction r·ªìi set = txId
//        )
//
//        // D√πng batch ƒë·ªÉ v·ª´a th√™m giao d·ªãch, v·ª´a c·ªông d·ªìn totalAmount
//        db.runBatch { batch ->
//            batch.set(txCol.document(txId), t)
//
//            // N·∫øu Category.totalAmount l√† Long:
//            batch.update(
//                userDoc.collection("categories").document(category.id),
//                "totalAmount",
//                com.google.firebase.firestore.FieldValue.increment(amount.toLong()) // ho·∫∑c amount n·∫øu d√πng Double
//            )
//        }.addOnSuccessListener {
//            Toast.makeText(requireContext(), "ƒê√£ l∆∞u giao d·ªãch!", Toast.LENGTH_SHORT).show()
//        }.addOnFailureListener {
//            Toast.makeText(requireContext(), "L·ªói: ${it.message}", Toast.LENGTH_SHORT).show()
//        }
//    }
//
//
//    /** L·∫Øng nghe realtime t·∫•t c·∫£ giao d·ªãch -> c·∫≠p nh·∫≠t list + t·ªïng */
//    private fun subscribeTransactions() {
//        val userId = auth.currentUser?.uid ?: return
//
//        db.collection("users").document(userId)
//            .collection("transactions")
//            .orderBy("date", Query.Direction.DESCENDING)
//            .addSnapshotListener { snapshot, error ->
//                if (error != null) {
//                    Toast.makeText(requireContext(), "L·ªói t·∫£i d·ªØ li·ªáu: ${error.message}", Toast.LENGTH_SHORT).show()
//                    return@addSnapshotListener
//                }
//
//                transactionList.clear()
//                var income = 0.0
//                var expense = 0.0
//
//                snapshot?.forEach { doc ->
//                    val t = doc.toObject(Transaction::class.java)
//                    transactionList.add(t)
//                    if (t.type == "income") income += t.amount else expense += t.amount
//                }
//
//                adapter.notifyDataSetChanged()
//                tvCount?.text = "${transactionList.size} giao d·ªãch"
//                tvIncome?.text = formatVnd(income)
//                tvExpense?.text = formatVnd(expense)
//                tvBalance?.text = formatVnd(income - expense)
//            }
//    }
//
//    private fun formatVnd(value: Double): String {
//        val nf = NumberFormat.getInstance(Locale("vi", "VN"))
//        return nf.format(value) + " ƒë"
//    }
//}
//


package com.example.quanlychitieu_finly

import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AutoCompleteTextView
import android.widget.EditText
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.google.android.material.card.MaterialCardView
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import java.text.NumberFormat
import java.text.SimpleDateFormat
import java.util.*

class HomeFragment : Fragment() {

    private lateinit var db: FirebaseFirestore
    private lateinit var auth: FirebaseAuth

    private lateinit var rvTransactions: RecyclerView
    private lateinit var adapter: TransactionAdapter
    private val transactionList = mutableListOf<Transaction>()

    private var tvIncome: TextView? = null
    private var tvExpense: TextView? = null
    private var tvBalance: TextView? = null
    private var tvCount: TextView? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_home, container, false)

        db = FirebaseFirestore.getInstance()
        auth = FirebaseAuth.getInstance()

        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> chuy·ªÉn LoginActivity v√† d·ª´ng ·ªü ƒë√¢y
        if (!ensureLoggedIn()) return view

        // Header: t√™n, avatar, l·ªùi ch√†o
        bindUserHeader(view)

        // RecyclerView
        rvTransactions = view.findViewById(R.id.rvTransactions)
        adapter = TransactionAdapter(transactionList)
        rvTransactions.layoutManager = LinearLayoutManager(requireContext())
        rvTransactions.adapter = adapter

        // Buttons (MaterialCardView)
        val btnAddIncome: MaterialCardView = view.findViewById(R.id.add_income_layout)
        val btnAddExpense: MaterialCardView = view.findViewById(R.id.add_expense_layout)
        btnAddIncome.setOnClickListener { openAddTransactionFlow("income") }
        btnAddExpense.setOnClickListener { openAddTransactionFlow("expense") }

        // T·ªïng
        tvIncome = view.findViewById(R.id.tvIncome)
        tvExpense = view.findViewById(R.id.tvExpense)
        tvBalance = view.findViewById(R.id.tvBalance)
        tvCount   = view.findViewById(R.id.tvTransactionCount)

        // Ng√†y
        val tvDate = view.findViewById<TextView>(R.id.tvDate)
        val df = SimpleDateFormat("EEEE, dd MMMM yyyy", Locale("vi", "VN"))
        tvDate.text = df.format(Date())

        // Load t·∫•t c·∫£ giao d·ªãch (users/{uid}/transactions)
        subscribeTransactions()

        return view
    }

    override fun onResume() {
        super.onResume()
        // N·∫øu quay l·∫°i fragment m√† user ƒë√£ ƒëƒÉng xu·∫•t -> LoginActivity
        if (ensureLoggedIn()) {
            // Refresh l·∫°i t√™n & avatar (ph√≤ng khi user v·ª´a c·∫≠p nh·∫≠t h·ªì s∆°)
            view?.let { bindUserHeader(it) }
        }
    }

    /** Tr·∫£ v·ªÅ true n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p; n·∫øu ch∆∞a th√¨ chuy·ªÉn sang LoginActivity v√† tr·∫£ false */
    private fun ensureLoggedIn(): Boolean {
        val user = auth.currentUser
        return if (user == null) {
            redirectToLogin()
            false
        } else {
            true
        }
    }

    private fun redirectToLogin() {
        val intent = Intent(requireContext(), LoginActivity::class.java).apply {
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK)
        }
        startActivity(intent)
        requireActivity().finish()
    }

    /** Bind t√™n th·∫≠t + avatar + l·ªùi ch√†o v√†o header */
    private fun bindUserHeader(root: View) {
        val tvUserName = root.findViewById<TextView>(R.id.tvUserName)
        val imgAvatar  = root.findViewById<ImageView>(R.id.imgAvatar)
        val tvGreeting = root.findViewById<TextView>(R.id.tvGreeting)

        val user = auth.currentUser ?: return

        // L·ªùi ch√†o theo gi·ªù
        tvGreeting.text = greetingVN()

        // Hi·ªÉn th·ªã t·∫°m th·ªùi t·ª´ Auth ƒë·ªÉ UI kh√¥ng tr·ªÖ
        tvUserName.text = bestNameFromAuth(user.displayName, user.email)

        // ·∫¢nh t·∫°m th·ªùi t·ª´ Auth (n·∫øu c√≥)
        user.photoUrl?.let { uri ->
            Glide.with(requireContext())
                .load(uri)
                .placeholder(android.R.drawable.ic_menu_gallery)
                .error(android.R.drawable.ic_menu_manage)
                .into(imgAvatar)
        }

        // Override b·∫±ng h·ªì s∆° Firestore n·∫øu c√≥
        db.collection("users").document(user.uid).get()
            .addOnSuccessListener { doc ->
                val fullName  = doc.getString("fullName")
                val username  = doc.getString("username")
                val avatarUrl = doc.getString("avatarUrl")

                val chosenName = when {
                    !fullName.isNullOrBlank() -> fullName
                    !username.isNullOrBlank() -> username
                    else -> null
                }
                if (!chosenName.isNullOrBlank()) {
                    tvUserName.text = chosenName
                }

                if (!avatarUrl.isNullOrBlank()) {
                    Glide.with(requireContext())
                        .load(avatarUrl)
                        .placeholder(android.R.drawable.ic_menu_gallery)
                        .error(android.R.drawable.ic_menu_manage)
                        .into(imgAvatar)
                }
            }
            .addOnFailureListener {
                // Gi·ªØ l·∫°i t√™n/·∫£nh t·ª´ Auth n·∫øu Firestore l·ªói
            }
    }

    /** 1) L·∫•y categories -> 2) M·ªü dialog nh·∫≠p & ch·ªçn danh m·ª•c -> 3) L∆∞u transaction */
    private fun openAddTransactionFlow(type: String) {
        if (!ensureLoggedIn()) return
        val userId = auth.currentUser?.uid ?: return

        val wantedType = if (type == "income") "income" else "spending"

        db.collection("users").document(userId)
            .collection("categories")
            .whereEqualTo("type", wantedType)
            .orderBy("name")
            .get()
            .addOnSuccessListener { snap ->
                val categories = snap.documents.mapNotNull { doc ->
                    doc.toObject(Category::class.java)?.apply { id = doc.id }
                }

                if (categories.isEmpty()) {
                    Toast.makeText(requireContext(), "Ch∆∞a c√≥ danh m·ª•c $wantedType. H√£y t·∫°o tr∆∞·ªõc.", Toast.LENGTH_SHORT).show()
                    return@addOnSuccessListener
                }

                showAddTransactionDialog(type, categories)
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "L·ªói t·∫£i danh m·ª•c: ${it.message}", Toast.LENGTH_SHORT).show()
            }
    }

    /** Hi·ªÉn th·ªã dialog nh·∫≠p title/amount + ch·ªçn category t·ª´ list */
    private fun showAddTransactionDialog(type: String, categories: List<Category>) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_add_transaction, null)
        val edtTitle   = dialogView.findViewById<EditText>(R.id.edtTitle)
        val edtAmount  = dialogView.findViewById<EditText>(R.id.edtAmount)
        val actv       = dialogView.findViewById<AutoCompleteTextView>(R.id.actvCategory)

        val catAdapter = CategoryDropdownAdapter(requireContext(), categories)
        actv.setAdapter(catAdapter)

        var chosen: Category? = categories.firstOrNull()
        actv.setText(chosen?.name ?: "", false)

        actv.setOnItemClickListener { _, _, position, _ ->
            chosen = categories[position]
            actv.setText(chosen!!.name, false)
        }

        MaterialAlertDialogBuilder(requireContext())
            .setTitle(if (type == "income") "Th√™m thu nh·∫≠p" else "Th√™m chi ti√™u")
            .setView(dialogView)
            .setPositiveButton("L∆∞u") { _, _ ->
                val title = edtTitle.text.toString().trim()
                val amount = edtAmount.text.toString().trim().toDoubleOrNull() ?: 0.0

                if (chosen == null) {
                    val typed = actv.text?.toString()?.trim().orEmpty()
                    chosen = categories.find { it.name == typed }
                }

                if (title.isEmpty() || chosen == null || amount <= 0) {
                    Toast.makeText(requireContext(), "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin h·ª£p l·ªá", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }
                saveTransaction(type, title, chosen!!, amount)
            }
            .setNegativeButton("H·ªßy", null)
            .show()
    }

    /** L∆∞u xu·ªëng users/{uid}/transactions */
    private fun saveTransaction(type: String, title: String, category: Category, amount: Double) {
        if (!ensureLoggedIn()) return
        val userId = auth.currentUser?.uid ?: return
        val userDoc = db.collection("users").document(userId)

        val txCol = userDoc.collection("transactions")
        val txId = txCol.document().id

        val t = Transaction(
            title = title,
            categoryId = category.id,
            categoryName = category.name,
            categoryIconUrl = category.iconUrl, // ƒë·ªÉ TransactionAdapter hi·ªÉn th·ªã icon
            categoryColorHex = "",              // n·∫øu b·∫°n c√≥ colorHex ·ªü Category th√¨ set t·∫°i ƒë√¢y
            amount = amount,
            type = type,
            date = Timestamp.now()
        )

        db.runBatch { batch ->
            batch.set(txCol.document(txId), t)
            batch.update(
                userDoc.collection("categories").document(category.id),
                "totalAmount",
                com.google.firebase.firestore.FieldValue.increment(amount.toLong())
            )
        }.addOnSuccessListener {
            Toast.makeText(requireContext(), "ƒê√£ l∆∞u giao d·ªãch!", Toast.LENGTH_SHORT).show()
        }.addOnFailureListener {
            Toast.makeText(requireContext(), "L·ªói: ${it.message}", Toast.LENGTH_SHORT).show()
        }
    }

    /** L·∫Øng nghe realtime t·∫•t c·∫£ giao d·ªãch -> c·∫≠p nh·∫≠t list + t·ªïng */
    private fun subscribeTransactions() {
        if (!ensureLoggedIn()) return
        val userId = auth.currentUser?.uid ?: return

        db.collection("users").document(userId)
            .collection("transactions")
            .orderBy("date", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Toast.makeText(requireContext(), "L·ªói t·∫£i d·ªØ li·ªáu: ${error.message}", Toast.LENGTH_SHORT).show()
                    return@addSnapshotListener
                }

                transactionList.clear()
                var income = 0.0
                var expense = 0.0

                snapshot?.forEach { doc ->
                    val t = doc.toObject(Transaction::class.java)
                    transactionList.add(t)
                    if (t.type.equals("income", true)) income += t.amount else expense += t.amount
                }

                adapter.notifyDataSetChanged()
                tvCount?.text = "${transactionList.size} giao d·ªãch"
                tvIncome?.text = formatVnd(income)
                tvExpense?.text = formatVnd(expense)
                tvBalance?.text = formatVnd(income - expense)
            }
    }

    private fun formatVnd(value: Double): String {
        val nf = NumberFormat.getInstance(Locale("vi", "VN"))
        return nf.format(value) + " ƒë"
    }

    // ---------- Helpers cho header ----------

    private fun greetingVN(): String {
        val hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY)
        return when (hour) {
            in 5..10 -> "Ch√†o bu·ªïi s√°ng! ‚òÄÔ∏è"
            in 11..13 -> "Ch√†o bu·ªïi tr∆∞a! üçΩÔ∏è"
            in 14..17 -> "Ch√†o bu·ªïi chi·ªÅu! üå§Ô∏è"
            in 18..22 -> "Ch√†o bu·ªïi t·ªëi! üåô"
            else -> "Xin ch√†o! üëã"
        }
    }

    private fun bestNameFromAuth(displayName: String?, email: String?): String {
        if (!displayName.isNullOrBlank()) return displayName
        if (!email.isNullOrBlank()) {
            val local = email.substringBefore("@").trim()
            if (local.isNotBlank()) return local
        }
        return "Ng∆∞·ªùi d√πng"
    }
}

