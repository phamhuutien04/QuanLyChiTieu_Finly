//package com.example.quanlychitieu_finly
//
//import android.os.Bundle
//import android.view.LayoutInflater
//import android.view.View
//import android.view.ViewGroup
//import android.widget.Toast
//import androidx.fragment.app.Fragment
//import androidx.recyclerview.widget.LinearLayoutManager
//import androidx.recyclerview.widget.RecyclerView
//import com.google.android.material.floatingactionbutton.FloatingActionButton
//import java.text.SimpleDateFormat
//import java.util.*
//
//@Suppress("DEPRECATION")
//class HomeFragment : Fragment() {
//
//    private lateinit var rvTransactions: RecyclerView
//    private lateinit var adapter: TransactionAdapter
//
//    override fun onCreateView(
//        inflater: LayoutInflater,
//        container: ViewGroup?,
//        savedInstanceState: Bundle?
//    ): View? {
//        val view = inflater.inflate(R.layout.fragment_home, container, false)
//
//        // N√∫t th√™m giao d·ªãch (FloatingActionButton)
//
//
//        // RecyclerView hi·ªÉn th·ªã danh s√°ch giao d·ªãch
//        rvTransactions = view.findViewById(R.id.rvTransactions)
//
//        val transactions = listOf(
//            Transaction("ƒÇn tr∆∞a", "ƒÇn u·ªëng", "-50.000 ƒë", "18/09/2025"),
//            Transaction("L∆∞∆°ng th√°ng 12", "L∆∞∆°ng", "+2.000.000 ƒë", "18/09/2025"),
//            Transaction("XƒÉng xe", "Di chuy·ªÉn", "-300.000 ƒë", "17/09/2025")
//        )
//
//        adapter = TransactionAdapter(transactions)
//        rvTransactions.layoutManager = LinearLayoutManager(requireContext())
//        rvTransactions.adapter = adapter
//
//        // Set ng√†y hi·ªán t·∫°i
//        val tvDate = view.findViewById<android.widget.TextView>(R.id.tvDate)
//        val dateFormat = SimpleDateFormat("EEEE, dd MMMM yyyy", Locale("vi", "VN"))
//        tvDate.text = dateFormat.format(Date())
//
//        return view
//    }
//}



package com.example.quanlychitieu_finly

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.AutoCompleteTextView
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.card.MaterialCardView
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import java.text.NumberFormat
import java.text.SimpleDateFormat
import java.util.*

class HomeFragment : Fragment() {

    private lateinit var db: FirebaseFirestore
    private lateinit var auth: FirebaseAuth

    private lateinit var rvTransactions: RecyclerView
    private lateinit var adapter: TransactionAdapter
    private val transactionList = mutableListOf<Transaction>()

    private var tvIncome: TextView? = null
    private var tvExpense: TextView? = null
    private var tvBalance: TextView? = null
    private var tvCount: TextView? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View {
        val view = inflater.inflate(R.layout.fragment_home, container, false)

        db = FirebaseFirestore.getInstance()
        auth = FirebaseAuth.getInstance()

        // RecyclerView
        rvTransactions = view.findViewById(R.id.rvTransactions)
        adapter = TransactionAdapter(transactionList)
        rvTransactions.layoutManager = LinearLayoutManager(requireContext())
        rvTransactions.adapter = adapter

        // Buttons (MaterialCardView)
        val btnAddIncome: MaterialCardView = view.findViewById(R.id.add_income_layout)
        val btnAddExpense: MaterialCardView = view.findViewById(R.id.add_expense_layout)
        btnAddIncome.setOnClickListener { openAddTransactionFlow("income") }
        btnAddExpense.setOnClickListener { openAddTransactionFlow("expense") }

        // T·ªïng
        tvIncome = view.findViewById(R.id.tvIncome)
        tvExpense = view.findViewById(R.id.tvExpense)
        tvBalance = view.findViewById(R.id.tvBalance)
        tvCount   = view.findViewById(R.id.tvTransactionCount)

        // Ng√†y
        val tvDate = view.findViewById<TextView>(R.id.tvDate)
        val df = SimpleDateFormat("EEEE, dd MMMM yyyy", Locale("vi", "VN"))
        tvDate.text = df.format(Date())

        // Load t·∫•t c·∫£ giao d·ªãch (users/{uid}/transactions)
        subscribeTransactions()

        return view
    }

    /** 1) L·∫•y categories -> 2) M·ªü dialog nh·∫≠p & ch·ªçn danh m·ª•c -> 3) L∆∞u transaction */
    private fun openAddTransactionFlow(type: String) {
        val userId = auth.currentUser?.uid ?: run {
            Toast.makeText(requireContext(), "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p", Toast.LENGTH_SHORT).show()
            return
        }

        val wantedType = if (type == "income") "income" else "spending"

        db.collection("users").document(userId)
            .collection("categories")
            .whereEqualTo("type", wantedType)              // <-- ch·ªâ l·∫•y danh m·ª•c ƒë√∫ng lo·∫°i
            .orderBy("name")                               // s·∫Øp x·∫øp theo t√™n (optional)
            .get()
            .addOnSuccessListener { snap ->
                val categories = snap.documents.mapNotNull { doc ->
                    doc.toObject(Category::class.java)?.apply { id = doc.id }  // <-- g·∫Øn id
                }

                if (categories.isEmpty()) {
                    Toast.makeText(requireContext(), "Ch∆∞a c√≥ danh m·ª•c $wantedType. H√£y t·∫°o tr∆∞·ªõc.", Toast.LENGTH_SHORT).show()
                    return@addOnSuccessListener
                }

                showAddTransactionDialog(type, categories)
            }
            .addOnFailureListener {
                Toast.makeText(requireContext(), "L·ªói t·∫£i danh m·ª•c: ${it.message}", Toast.LENGTH_SHORT).show()
            }
    }


    /** Hi·ªÉn th·ªã dialog nh·∫≠p title/amount + ch·ªçn category t·ª´ list */
    private fun showAddTransactionDialog(type: String, categories: List<Category>) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_add_transaction, null)
        val edtTitle   = dialogView.findViewById<EditText>(R.id.edtTitle)
        val edtAmount  = dialogView.findViewById<EditText>(R.id.edtAmount)
        val actv       = dialogView.findViewById<AutoCompleteTextView>(R.id.actvCategory)

        val catAdapter = CategoryDropdownAdapter(requireContext(), categories)
        actv.setAdapter(catAdapter)

        // ch·ªçn s·∫µn m·ª•c ƒë·∫ßu
        var chosen: Category? = categories.firstOrNull()
        actv.setText(chosen?.name ?: "", false)

        // üîß QUAN TR·ªåNG: khi ch·ªçn item, set l·∫°i text = name (kh√¥ng ph·∫£i toString())
        actv.setOnItemClickListener { _, _, position, _ ->
            chosen = categories[position]
            actv.setText(chosen!!.name, false)
        }

        MaterialAlertDialogBuilder(requireContext())
            .setTitle(if (type == "income") "Th√™m thu nh·∫≠p" else "Th√™m chi ti√™u")
            .setView(dialogView)
            .setPositiveButton("L∆∞u") { _, _ ->
                val title = edtTitle.text.toString().trim()
                val amount = edtAmount.text.toString().trim().toDoubleOrNull() ?: 0.0

                // fallback n·∫øu ng∆∞·ªùi d√πng t·ª± s·ª≠a text
                if (chosen == null) {
                    val typed = actv.text?.toString()?.trim().orEmpty()
                    chosen = categories.find { it.name == typed }
                }

                if (title.isEmpty() || chosen == null || amount <= 0) {
                    Toast.makeText(requireContext(), "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin h·ª£p l·ªá", Toast.LENGTH_SHORT).show()
                    return@setPositiveButton
                }
                saveTransaction(type, title, chosen!!, amount)
            }
            .setNegativeButton("H·ªßy", null)
            .show()
    }


    /** L∆∞u xu·ªëng users/{uid}/transactions */
    private fun saveTransaction(type: String, title: String, category: Category, amount: Double) {
        val userId = auth.currentUser?.uid ?: return
        val userDoc = db.collection("users").document(userId)

        // T·∫°o id tr∆∞·ªõc ƒë·ªÉ g·∫Øn v√†o doc (d·ªÖ x√≥a/s·ª≠a sau n√†y)
        val txCol = userDoc.collection("transactions")
        val txId = txCol.document().id

        val t = Transaction(
            title = title,
            categoryId = category.id,
            categoryName = category.name,
            categoryIconUrl = category.iconUrl,
            categoryColorHex = "",              // c√≥ color th√¨ set v√†o ƒë√¢y
            amount = amount,
            type = type,
            date = Timestamp.now()
            // n·∫øu mu·ªën l∆∞u lu√¥n id: th√™m field v√†o model Transaction r·ªìi set = txId
        )

        // D√πng batch ƒë·ªÉ v·ª´a th√™m giao d·ªãch, v·ª´a c·ªông d·ªìn totalAmount
        db.runBatch { batch ->
            batch.set(txCol.document(txId), t)

            // N·∫øu Category.totalAmount l√† Long:
            batch.update(
                userDoc.collection("categories").document(category.id),
                "totalAmount",
                com.google.firebase.firestore.FieldValue.increment(amount.toLong()) // ho·∫∑c amount n·∫øu d√πng Double
            )
        }.addOnSuccessListener {
            Toast.makeText(requireContext(), "ƒê√£ l∆∞u giao d·ªãch!", Toast.LENGTH_SHORT).show()
        }.addOnFailureListener {
            Toast.makeText(requireContext(), "L·ªói: ${it.message}", Toast.LENGTH_SHORT).show()
        }
    }


    /** L·∫Øng nghe realtime t·∫•t c·∫£ giao d·ªãch -> c·∫≠p nh·∫≠t list + t·ªïng */
    private fun subscribeTransactions() {
        val userId = auth.currentUser?.uid ?: return

        db.collection("users").document(userId)
            .collection("transactions")
            .orderBy("date", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Toast.makeText(requireContext(), "L·ªói t·∫£i d·ªØ li·ªáu: ${error.message}", Toast.LENGTH_SHORT).show()
                    return@addSnapshotListener
                }

                transactionList.clear()
                var income = 0.0
                var expense = 0.0

                snapshot?.forEach { doc ->
                    val t = doc.toObject(Transaction::class.java)
                    transactionList.add(t)
                    if (t.type == "income") income += t.amount else expense += t.amount
                }

                adapter.notifyDataSetChanged()
                tvCount?.text = "${transactionList.size} giao d·ªãch"
                tvIncome?.text = formatVnd(income)
                tvExpense?.text = formatVnd(expense)
                tvBalance?.text = formatVnd(income - expense)
            }
    }

    private fun formatVnd(value: Double): String {
        val nf = NumberFormat.getInstance(Locale("vi", "VN"))
        return nf.format(value) + " ƒë"
    }
}

