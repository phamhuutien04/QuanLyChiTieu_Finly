package com.example.quanlychitieu_finly

import android.content.Intent
import android.graphics.Bitmap
import android.graphics.drawable.BitmapDrawable
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.cloudinary.Cloudinary
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import kotlin.concurrent.thread

class RegisterActivity : AppCompatActivity() {

    private lateinit var auth: FirebaseAuth
    private lateinit var cloudinary: Cloudinary
    private lateinit var db: FirebaseFirestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_register)

        // Kh·ªüi t·∫°o c√°c instance
        auth = FirebaseAuth.getInstance()
        cloudinary = CloudinaryConfig.cloudinaryInstance // ƒê·∫£m b·∫£o b·∫°n c√≥ file CloudinaryConfig
        db = FirebaseFirestore.getInstance()

        // √Ånh x·∫° View
        val edtUsername = findViewById<EditText>(R.id.edtUsername)
        val edtEmail = findViewById<EditText>(R.id.edtEmail)
        val edtPassword = findViewById<EditText>(R.id.edtPassword)
        val edtConfirmPassword = findViewById<EditText>(R.id.edtConfirmPassword)
        val btnRegister = findViewById<Button>(R.id.btnRegister)
        val txtGoLogin = findViewById<TextView>(R.id.txtGoLogin)

        btnRegister.setOnClickListener {
            val username = edtUsername.text.toString().trim()
            val email = edtEmail.text.toString().trim()
            val password = edtPassword.text.toString().trim()
            val confirmPassword = edtConfirmPassword.text.toString().trim()

            // Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p
            if (username.isEmpty()) {
                edtUsername.error = "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng"
                return@setOnClickListener
            }
            if (email.isEmpty()) {
                edtEmail.error = "Vui l√≤ng nh·∫≠p email"
                return@setOnClickListener
            }
            if (password.isEmpty() || password.length < 6) {
                edtPassword.error = "M·∫≠t kh·∫©u ph·∫£i ‚â• 6 k√Ω t·ª±"
                return@setOnClickListener
            }
            if (password != confirmPassword) {
                edtConfirmPassword.error = "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp"
                return@setOnClickListener
            }

            // T·∫°o t√†i kho·∫£n Firebase Auth
            auth.createUserWithEmailAndPassword(email, password)
                .addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        val userId = auth.currentUser?.uid ?: return@addOnCompleteListener

                        // D·ªØ li·ªáu ng∆∞·ªùi d√πng
                        val user = hashMapOf(
                            "id" to userId,
                            "username" to username,
                            "email" to email,
                            "balance" to 0L, // üí∞ Ti·ªÅn m·∫∑c ƒë·ªãnh = 0
                            "createdAt" to System.currentTimeMillis()
                        )

                        // L∆∞u th√¥ng tin user v√†o Firestore
                        db.collection("users").document(userId)
                            .set(user)
                            .addOnSuccessListener {
                                Toast.makeText(this, "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()

                                // üöÄ G·ªåI H√ÄM N√ÇNG C·∫§P T·∫†I ƒê√ÇY
                                createDefaultCategories(userId)

                                // Chuy·ªÉn qua LoginActivity
                                val intent = Intent(this, LoginActivity::class.java)
                                startActivity(intent)
                                finish()
                            }
                            .addOnFailureListener { e ->
                                Toast.makeText(this, "‚ùå L·ªói l∆∞u Firestore: ${e.message}", Toast.LENGTH_LONG).show()
                            }
                    } else {
                        Toast.makeText(this, "‚ùå L·ªói ƒëƒÉng k√Ω: ${task.exception?.message}", Toast.LENGTH_LONG).show()
                    }
                }
        }

        txtGoLogin.setOnClickListener {
            startActivity(Intent(this, LoginActivity::class.java))
            finish()
        }
    }

    /**
     * üîπ N√¢ng c·∫•p: T·∫£i ·∫£nh l√™n Cloudinary V√Ä l∆∞u th√¥ng tin v√†o Firestore
     */
    private fun createDefaultCategories(userId: String) {
        // C·∫•u tr√∫c: Map<Lo·∫°i, List<Pair<IconRes, T√™n>>>
        val defaultCategories = mapOf(
            "spending" to listOf(
                Pair(R.drawable.ic_category_food, "ƒÇn u·ªëng"),
                Pair(R.drawable.ic_car, "Di chuy·ªÉn"),
                Pair(R.drawable.ic_category_shop, "Mua s·∫Øm"),
                Pair(R.drawable.ic_category_billic, "H√≥a ƒë∆°n"),
                Pair(R.drawable.ic_category_sk, "Y t·∫ø"),
                Pair(R.drawable.ic_cinema, "Gi·∫£i tr√≠"),
                Pair(R.drawable.ic_sports, "Th·ªÉ thao"),
                Pair(R.drawable.ic_adds, "Kh√°c")
            ),
            "income" to listOf(
                Pair(R.drawable.ic_category_wage, "L∆∞∆°ng"),
                Pair(R.drawable.ic_category_wages, "Th∆∞·ªüng"),
                Pair(R.drawable.ic_adds, "Qu√† t·∫∑ng"),
                Pair(R.drawable.ic_adds, "Kh√°c")
            )
        )

        thread {
            try {
                // D√πng batch ƒë·ªÉ th·ª±c hi·ªán nhi·ªÅu thao t√°c ghi c√πng l√∫c, hi·ªáu qu·∫£ h∆°n
                val batch = db.batch()

                for ((type, categories) in defaultCategories) {
                    for ((iconRes, name) in categories) {
                        // 1. T·∫£i ·∫£nh l√™n Cloudinary
                        val drawable = ContextCompat.getDrawable(this, iconRes)!!
                        val bitmap = (drawable as BitmapDrawable).bitmap
                        val baos = ByteArrayOutputStream()
                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos)
                        val inputStream = ByteArrayInputStream(baos.toByteArray())

                        val publicId = "users/$userId/$type/$name/icon"
                        val uploadParams = mapOf(
                            "public_id" to publicId,
                            "upload" to CloudinaryConfig.UPLOAD_PRESET
                        )
                        cloudinary.uploader().upload(inputStream, uploadParams)
                        inputStream.close()

                        // 2. L·∫•y URL ·∫£nh v·ª´a t·∫£i l√™n ƒë·ªÉ l∆∞u v√†o Firestore
                        val imageUrl = cloudinary.url().generate(publicId)

                        // 3. Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o Firestore
                        // T·∫°o m·ªôt document m·ªõi trong sub-collection "categories" c·ªßa user
                        val categoryDocRef = db.collection("users").document(userId)
                            .collection("categories").document() // T·∫°o ID t·ª± ƒë·ªông

                        val categoryData = hashMapOf(
                            "id" to categoryDocRef.id,
                            "name" to name,
                            "type" to type, // "spending" ho·∫∑c "income"
                            "iconUrl" to imageUrl,
                            "totalAmount" to 0L // S·ªë ti·ªÅn giao d·ªãch ban ƒë·∫ßu cho danh m·ª•c n√†y = 0
                        )

                        // Th√™m thao t√°c "set" v√†o batch, ch∆∞a th·ª±c thi ngay
                        batch.set(categoryDocRef, categoryData)
                    }
                }

                // 4. Th·ª±c thi t·∫•t c·∫£ c√°c thao t√°c ghi trong batch m·ªôt l·∫ßn duy nh·∫•t
                batch.commit().addOnSuccessListener {
                    runOnUiThread {
                        // Toast n√†y ch·ªâ hi·ªán khi c·∫£ upload v√† l∆∞u Firestore ƒë·ªÅu xong
                        Toast.makeText(this, "üìÇ T·∫°o danh m·ª•c m·∫´u th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
                    }
                }

            } catch (e: Exception) {
                runOnUiThread {
                    Toast.makeText(this, "‚ö†Ô∏è L·ªói khi t·∫°o danh m·ª•c: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
}